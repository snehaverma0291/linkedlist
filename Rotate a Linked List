
//program to rotate linked list
#include<iostream>
#include<complex>
#include<stack>
#include<queue>
using namespace std;

struct node 
{ 
	int data; 
  struct node *next; 
};

struct node *rotate(struct node *head,int n) 
{
	   stack<int>st;
	   queue<int>q;
	   int count=0;
	   struct node *temp2=NULL;
	   struct node *new_head=NULL;
	   temp2 = (node*)malloc(sizeof(struct node));
	   new_head = (node*)malloc(sizeof(struct node));
	   //temp=head;
	   temp2=head;
	   int flag=0;
	   
	    
	   
	   
	    while(temp2!=NULL) 
	    {
	     	
	     	temp2=temp2->next;
	     	
	     	
	     	count=count+1;
	     	if(count==n+1) 
	     	{
	     		
	     		new_head=temp2;
	     		
	     	}
	     	//cout<<temp2->data<<endl;
	     	if(temp2->next==NULL) 
	       {
	   	   temp2->next=head;
	   	   break;
	        }
	     	
	     		//cout<<temp2->data<<endl;
	     	
	   } 	
	   
	   
	   
	 return new_head;
}

int main()
{
	/* Initialize nodes */ 
		struct node *head=NULL; 
	 struct node *one = NULL;
	 struct node *two = NULL; 
	 struct node *three = NULL;
	 struct node *four = NULL;
	 struct node *five = NULL;
	 
	  /* Allocate memory */
	  one = (node*)malloc(sizeof(struct node));  
	  two =  (node*)malloc(sizeof(struct node));
	  three = (node*)malloc(sizeof(struct node));
	  four = (node*)malloc(sizeof(struct node));
	  five = (node*)malloc(sizeof(struct node));
	  
	  
	   /* Assign data values */
	    one->data = 1;
	    two->data = 2; 
	    three->data=3; 
	    four->data=4;
	    five->data=5;
	    
	    /* Connect nodes */
	     one->next = two; 
	     two->next = three;
	     three->next = four ; 
	     four->next = five;
	     five->next =NULL;
	     /* Save address of first node in head */       
	       head = one;
	       
	       struct node *rotated_head = NULL;
	 
	  /* Allocate memory */
	rotated_head = (node*)malloc(sizeof(struct node));
	      rotated_head=rotate(head,2);
	       
	      cout<<rotated_head->data<<endl;
	  cout<<rotated_head->next->data<<endl;
	  cout<<rotated_head->next->next->data<<endl;
	  cout<<rotated_head->next->next->next->data<<endl;
	  cout<<rotated_head->next->next->next->next->data<<endl;
	  
	       
}
